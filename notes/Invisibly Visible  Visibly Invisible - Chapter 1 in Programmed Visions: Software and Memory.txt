Reading: Invisibly Visible, Visibly Invisible - Chapter 1 in Programmed Visions: Software and Memory

Author: Wendy Chun

Units: 1.3666666666667, Zone:network technology

Bibliography:Chun, Wendy H. K. 2011. 'Invisibly Visible, Visibly Invisible' Chapter 1 in Programmed Visions: Software and Memory. The MIT Press. pp. 15-55

Links:http://observatory.constantvzw.org/books/wendy-hui-kyong-chun-programmed-visions-software-and-memory.pdf


Notes:

Mind the definition of code as fetish. The relationship with territorialisation. The critique towards FLOSS movement and the fetish of source code!!!!




A theoretical examination of the surprising emergence of software as a guiding metaphor for our neoliberal world.

New media thrives on cycles of obsolescence and renewal: from celebrations of cyber-everything to Y2K, from the dot-com bust to the next big things—mobile mobs, Web 3.0, cloud computing. In Programmed Visions, Wendy Hui Kyong Chun argues that these cycles result in part from the ways in which new media encapsulates a logic of programmability. New media proliferates 'programmed visions,' which seek to shape and predict—even embody—a future based on past data. These programmed visions have also made computers, based on metaphor, metaphors for metaphor itself, for a general logic of substitutability.

Chun argues that the clarity offered by software as metaphor should make us pause, because software also engenders a profound sense of ignorance: who knows what lurks behind our smiling interfaces, behind the objects we click and manipulate? The combination of what can be seen and not seen, known (knowable) and not known—its separation of interface from algorithm and software from hardware—makes it a powerful metaphor for everything we believe is invisible yet generates visible, logical effects, from genetics to the invisible hand of the market, from ideology to culture.

--------------------------------------------------------------


Computers: decline and frenzy of visual knowledge.

the proliferation of digital images (new media as "visual culture") and "total information" systems (new media as "transparent").

Dealing first with proliferation of images: 

(Chun, 2011, 15)
"digital images [...] break the temporal link between record and event."

digital images challenge photorealism!!! *****


forensic realism: forensic evidence is needed to asses the reality of an event

Proliferation of altered images, at the same time, has allowed the believe that computers and digital environments can be (or are) completely transparent.

The author elabprates in the goodoldfashioned survaillance argument: both the governments and corporations (google) are keeping track of the data that emanates from our digital presence.

The so-called transparency of the computer has to be interrogated. In roder to show what is in the other side, to display content, it is necessary to compute. Break down into pieces of data the signal and reassamble it for the observers reception.

The content is always generated, not represented or reproduced. 

(Chun, 2011, p. 16)
"Seeing no longer guarantees knowing"


The more dense the computetion the more invisible for us it becomes. We rely on ideological believe when we try to engage with the transparency of the machines. 

Visible effects, yet invisible processes. In other words, the side effects of computation are excessively visible but the computation in itself becomes every time less visible.


Basically, we have faith in computers. A link between rationality and mysticism. 

In that link is where a strong teish of programmers relies. This rpoduces in users and programmers a weird sense of empowerment. "sovereign subjectivity"

To understand software:

"Software perpetuates certain notions of seeing as knowing, of reading and readability, which were supposed to have faded with the waning of indexicality, by producing WYSIWG (What You See Is What You Get) interfaces that mimic both ideology and ideology critique, the process of covering and uncovering"

"Software, through programming languages that stem from a gendered system of command and control, creates an invisible system of visibility, a system of causal pleasure. This system renders our machine's normal processes demonic and makes our computer truly a medium: something in between, mystical, channeling, and not entirely trustworthy. It becomes a conduit that also amplifies and selects what is at once real and unreal, true and untrue, visible and invisible."


1. Sourcery and source code:

(Chun, 2011, p. 19)
"Code as true representation of action"


Code ytransforms action into noun. Freezes action in time and conceals it into space. Source code becomes the only visible aspect of computation, the processes taken by the machine become invisible.

Separates instruction from execution.

(Chun, 2011, p. 19)
"This separation is crucial to understanding the power and thrill of programming, in
particular the nostalgic fantasy of an all-powerful programmer, a sovereign neoliberal
subject who magically transforms words into things."

Who is the master and who is the slave? The code or the programmer? 

"Back then, however, the "master programmer" was part of the machine (it controlled the sequence of calculation); computers, in contrast, were human. Rather than making programmers and users either masters or slaves, code as logos establishes a perpetual oscillation between the two positions: every move to empower also estranges."

Back then, female racialised women were programmers (direct programmers, connecting cables and assigning values directly to the machine). The computers were human and the programmers were not.

Source code and its manipulation engenders, surprisingly, pleasure. <-    This right here is related to the analysis of Jodi Dean and her affective networks.

"Framed as a re-source, it can help us think through the machinic and human rituals that help us imagine our technologies and their executions"

Source Code as Logos

The context is lev manovich's ideas on new media: The essence of new media is software and programming and knowing software is enlightening.

Chun maps a turn. The turn from media theory to software studies.

On Manovich: arguments is that a rigorous engagement
with software makes new media studies more, rather than less, vapory. 

Vapory means to been unable to distinguish betwen what is ephimeral and what is permanent. After all software is ephemeral.

On free software:

(Chun, 2011, 21)
"Software, free or not, is embedded
and participates in structures of knowledge-power. For instance, using free software
does not mean escaping from power, but rather engaging it differently, for free and
open source software profoundly privatizes the public domain: GNU copyleft-which
allows one to use, modify, and redistribute source code and derived programs, but
only if the original distribution terms are maintained-seeks to fight copyright by
spreading licences everywhere."

Free Software movement amplifies the power of code by giving such an importance to access of source code....

So how about execution and institutional frameworkds for it to work? Is source code really layered and separated with other segments of the software/program? can you neatly separate source code from the rest of the aspects of software?

Code: a set of instructions... commonly understood as that at least.

Software as a cause that drives computation.  <- this is very relevant!!!

Hardware needs to be transformed into code to be relevant. to be useful!

Programming langauges and code,can be said, to be the only langauge that actually and literally does what it says.
^^ This claims that the instructions and the execution of code are firmly separated.

Code is action -> a deed, in the beginbing there was god and god was the word. So relating this into christian values.

Code is performative, much more than language or so its claimed by Galloway and Hayles.

When laguange is performative it changes and affects the minds of subjects, but code quite literally moves parts of the world and transforms it. It claims a certain materiality.

***Code exists as commands to a machine, however code exceeds its one way communication with the machines. It always anthropomorphic. It always has a surplus that belongs to the human-to-human communication*****

Is execution erased in Galloway's analogies of computation? is code that logically can be executed the same as code that is actually being executed?

"The relationship between executable and higher-
level code is not that of mathematical identity but rather logical equivalence, which
can involve a leap of faith"


Software is layered, a runing program might not make use of certain lines of code. So the object that is instantiated by the code is very different from the source code in itself.

from Paul Ricour: "techne is something more refined than a routine or an empirical practice and in spite of its focus on production, it contains a speculative element."

Technqiue has an excess, a surplus. That is not mere production.

--- this down here is very relevant, does code have emergent effect or is it a causal relationship with programs? ---
(Chun, 2011, p. 24)
"Code does not always or automatically do what it says, but it does so in a crafty, speculative manner in which meaning and action are both created. It carries with it the possibility of deviousness: our belief that compilers simply expand higher-level commands-rather than alter or insert other behaviors-is simply that, a belief, one of the many that sustain computing as such. This belief glosses over the fact that source code only becomes a source after the fact. Execution, and a whole series of executions, belatedly makes some piece of code a source, which is again why source code, among other things, was initially called
pseudocode."

When code is executed something emerges from it that is not the effects of high order instructions from a human to a computer. Meaning and behaviours that are unexpected emerge from it.

Source code as techne, as a generalized writing, is spectral. It is neither
dead repetition nor living speech; nor is it a machine that erases the difference
between the two. It, rather, puts in place a "relation between life and death, between
present and representation, between two apparatuses." 26 As I elaborate throughout this
book, information-through its capture in memory-is undead.


So source code can only exist after it is erased as source code. It is a spectral presence.

"coding is ... the technique of providing a dynamic background to control the auto-
matic evolution of a meaning."  <- Page 25!!!

A good critique of hardware code: diagram and schematrics for algorithmic hardware:

Given that the schematics are drawn as logical and not considering real space, thats is susceptible to electromagnetic fields or other incidents, they operate only in a logical space.

"The notion of source code as source coincides with the introduction of alphanu-
meric languages. With them, human-written, nonexecutable code becomes source
code and the compiled code, the object code."

Attribute action to a subject, inherited from real languages.

Action into language -> source code. Against Galloway -> to use high order langs is already anthropomorphising the machines.

Differently with law and lang -> source code, when compiled automatically performs an action. Code is self-enforcing law.

Yes, a relationship with Foucault and discipline -> "Code is law," in other words, automatically brings together disciplinary and sovereign power through the production of self-enforcing rules that, as von Neumann argues, "govern" a situation.

Many keys in the notion of automatically eecute law. Many phantasies of power emerge here.

Power is mappable!!! -> return to sovereign power!!!! Programmers are fixated in executing and making the law!!!!

Butler: performing produces the subject

But the coder is ignorant and cannot forsee all the possibilities of code. The programmer is a small-s sovereign that reacts to the chaos of neoliberal complexity. By becoming a sovereign themselves. Neoliberalism certainly denies the possibilities of a Sovereign. 

^^^^  why critique only neoliberalism, what does neoliberal mean for Chun?


------

History of computation highly gendered and militarised!!!

(Chun, 2011, p. 29)
"One could say that programming became
programming and software became software when the command structure shifted
from commanding a "girl" to commanding a machine."

Commnading was inherited from the military training of women computers and from that interaction (a military man commanding a women) we have the command line in the computer environment.

Command and then automatization lie at the heart of computation!!!!!!!!!!!

But master/slave dialectics is never simple.

Women were changing and shaping the new automatised computers (the mechanic ones)

"Sadie Plant has argued that computing is essentially feminine. Both software and feminine
sexuality reveal the power that something that cannot be seen can have. 68 Women,
Plant argues, "have not merely had a minor part to play in the emergence of digital
machines ... . Theirs is not a subsidiary role which needs to be rescued for posterity,
a small supplement whose inclusion would set the existing records straight ... . Hard-
ware, software, wetware-before their beginnings and beyond their ends, women have
been the simulators, assemblers, and programmers of the digital machines." 69 Because
of this and women's early (forced) adaptation to "flexible" work conditions, Plant
argues, women are best prepared to face our digital, networked future : "sperm count,"
she writes, "falls as the replicants stir and the meat learns how to learn for itself.
Cybernetics is feminisation .""

Computation, as practiced by the first women-coders was transparent, the inside and the outside converged. The control over the machine was not mediated by software since perhaps the women were the software.

--------
Burocracia en la máquina:

Computing:
neoliberal governmentality and resucitates dreams of sovereignity.

(Chun, 2011, p. 36)
"However, although automatic programming has been linked to empowerment, it has also led to the more thorough (because subtle and internalized) disciplining of programmers, which sim ultaneously empowers and disempowers programmers."


Structural programming as de-skilling.

An argyment is made about programming moving away from knowledge production and into abstrraction. Which compromises the programmer's knpowledge in exchange of efficiency and repeatability.

"Abstraction-the "erasure of difference in the service of
likeness or equality"-also erases, or "forgets," knowledge, rendering it, like the
machine, ghostly"

(Chun, 2011, p. 47)
"Designers of programming languages are creating computing machines as surely as
the engineer who works in silicon and copper, but without the limitations imposed
by materials and manufacturing technology"

The difference is the level of abstraction. 

"Abstraction is the computer's game, as is programming
in the strictest and newest sense of the word: with "data-driven" programming, for
instance, machine learning/artificial intelligence (computers as source of source code)
has become mainstream."

Mechanisation of power relations. Source code and machine-automatisation performs what clerical personel was dpoing before machines.

What nowadays is understood solely as programming is actually automatic programming


Automatic computing was enmasculating since it provided an "easier" entry tool (high level programming langs) rather than direct programming that was in the hands of a few experts, very jelous of their abilities.

(Chun, 2011, p. 46)
"To program in a higher-level language is to enter a magical world-it is to enter a world of logos, in which one's code faithfully represents one's intentions, albeit through its blind repetition rather than its "living" status"

computer contains its own worlds in miniature that is entirely consistant within itself. No room for immanent critique perhaps?

This is a source of pleasure as the programmer is able to be the sovereign of such world.

Iterability produces both langauge and subject!!!

compulsive programming <- new mental illness

both entail megalomania and fantasies of omnipotence, as well as a "pleasureless drive for reassurance"

The pleasure comes from the fact that the computer can do anything that the programmer wishes but the outcome of progamming is always imperfect. 

"The computer challenges his power, not his knowledge."

For Stallman this pleasure of knowing the computer can do what you want but you have to learn how, is what he associates with freedom. Liberation is going after power. Knowing how to hack the thing is power.


(Chun, 2011, p. 49)
"Hacking reveals the extent to which source code can become a fetish: something endless that always leads us pleasurably, as well as anxiously, astray."

"Software is axiomatic. As a first principle, it fastens in place a certain neoliberal logic of cause and effect, based on the erasure of execution and the privileging of programming that bleeds elsewhere and stems from elsewhere as well. As an axiomatic, it, as Gilles Deleuze and Felix Guattari argue, artificially limits decodings."

As capital, constantly segments code into what can be decoded and what not. The formed segments are artificial.

That is, fetishism , as "primitive causal thinking, " derived causality from "things"-in all the richness of this concept-rather than from reason.  
^^ pay a lot of attention to the definition of fetishim. Code reproduces certain logic of neoliberal cause and effects.

Fetish allows one to visualise what is unknown.

So, is Stallman's and free software fetish to code an expression of an inability to understand why are we not free?

OJO!!!! Then a relationship is traced to Marx's cnception of fetishism. Captial si the ultimate fetish. Since... "capitalist thus confuses social relations and the labor activities of real individuals with capital and its seemingly magical ability to reproduce"

(Chun, 2011, p. 51)
"The parallel to source code seems obvious: we "primitive folk" worship source
code as a magical entity-as a source of causality-when in truth the power lies
elsewhere, most importantly, in social and machinic relations. If code is performa-
tive, its effectiveness relies on human and machinic rituals ."

(Chun, 2011, p. 52)
"Source code, in other words, may be the source of things other than the machine
execution it is "supposed" to engender."
^^ 
so yes, source code produces surplus. Something that exeeds its own execution by the machine. Meaning that can be poetic or simple communication to toher humans regardless of its possibility of being readable by a computer

The right question to ask is not 'what do we know?' but 'what do we do?'*****

The execution of code has emergent effect. As turing said. Knowing the facts odoes not mean that all the (side)effects of such fact spring into consciousness right away. 

Such emergence (not exhausting the code) is opens a wolrd of possibilities for code practice. 



























































 



































































